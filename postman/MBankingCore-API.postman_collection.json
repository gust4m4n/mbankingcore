{
  "info": {
    "_postman_id": "mbankingcore-api-collection",
    "name": "MBankingCore API Collection",
    "description": "API testing collection for MBankingCore with comprehensive endpoint coverage.\n\n## Features:\n- üè¶ Banking Authentication (2-step OTP process)\n- üì± Device session management\n- üîÑ Automated token refresh\n- ‚úÖ Comprehensive API coverage\n- üí∞ Multi-account banking support\n- üìù Article management (CRUD)\n- üéØ Onboarding content management\n- üì∏ Photo gallery management\n- ‚öôÔ∏è Config management system\n- üìã Terms & Conditions management\n- üîê Privacy Policy management\n- üë• User management (Admin)\n- üß™ Testing scenarios\n\n## API Coverage (38+ endpoints):\n- **Public APIs** (7 endpoints)\n  - Health Check (1)\n  - Terms & Conditions (2)\n  - Privacy Policy (2)\n  - Onboarding (2)\n- **Banking Authentication APIs** (3 endpoints)\n- **Protected User APIs** (13+ endpoints)\n  - User Profile (2)\n  - Bank Account Management (5)\n  - Article Management (5)\n  - Photo Management (4)\n- **Admin Management APIs** (13+ endpoints)\n\n## Testing Order:\n1. **Public APIs** - No authentication required\n2. **Banking Authentication** - 2-step login process\n3. **Protected APIs** - User profile, bank accounts, content\n4. **Admin APIs** - User management, content management\n\n## Usage:\n1. Import environment file: `MBankingCore-API.postman_environment.json`\n2. **Important**: Update `banking_account_number` to a unique value before testing\n3. Run collection with automated token handling\n4. Test all API endpoints systematically\n\n## Banking Authentication Flow:\n1. Banking Login ‚Üí Submit credentials and get login_token + OTP\n2. Banking Verify ‚Üí Submit login_token + OTP and get session tokens\n3. Access protected endpoints ‚Üí Auto token refresh\n4. Test CRUD operations on bank accounts and other resources\n5. Logout selectively ‚Üí Per device or all devices\n\n## Important Notes:\n‚ö†Ô∏è **Account Numbers Must Be Unique**: Each account number must be unique across the system. If testing with existing data, ensure you use a unique account number in the environment variables to avoid database constraint violations.\n\nüîë **Environment Variables**: The collection uses pre-configured variables for testing. Update these values as needed:\n- `banking_account_number`: Use unique 16-digit number\n- `banking_phone`: Use unique phone number\n- `banking_name`: Full name (8+ characters)\n- `banking_mother_name`: Mother's name (8+ characters)\n- `banking_pin_atm`: 6-digit PIN",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_uid": "12345-mbankingcore"
  },
  "item": [
    {
      "name": "üè• Health Check",
      "item": [
        {
          "name": "Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test response status",
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Test response structure",
                  "pm.test('Response has correct structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('code');",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "});",
                  "",
                  "// Test response data",
                  "pm.test('Health check data is correct', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.code).to.eql(200);",
                  "    pm.expect(responseJson.message).to.include('running');",
                  "    pm.expect(responseJson.data).to.have.property('status', 'ok');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "health"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "üè¶ Banking Authentication",
      "item": [
        {
          "name": "Banking Login (Step 1)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test response status",
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Test response structure",
                  "pm.test('Response has correct structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('code');",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.have.property('login_token');",
                  "});",
                  "",
                  "// Extract and save login token",
                  "if (pm.response.code === 200) {",
                  "    const responseJson = pm.response.json();",
                  "    const data = responseJson.data;",
                  "    ",
                  "    if (data.login_token) {",
                  "        pm.environment.set('login_token', data.login_token);",
                  "        console.log('‚úÖ Login token saved to environment');",
                  "        console.log('üì± OTP will be sent to phone number');",
                  "        console.log('‚è∞ Token expires in:', data.expires_in, 'seconds');",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"{{banking_name}}\",\n  \"account_number\": \"{{banking_account_number}}\",\n  \"mother_name\": \"{{banking_mother_name}}\",\n  \"phone\": \"{{banking_phone}}\",\n  \"pin_atm\": \"{{banking_pin_atm}}\",\n  \"device_info\": {\n    \"device_type\": \"android\",\n    \"device_id\": \"{{device_id_banking}}\",\n    \"device_name\": \"Samsung Galaxy S23\"\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/login",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "login"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Banking Login Verification (Step 2)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test response status",
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Test response structure",
                  "pm.test('Response has correct structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('code');",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.have.property('access_token');",
                  "    pm.expect(responseJson.data).to.have.property('refresh_token');",
                  "});",
                  "",
                  "// Extract and save tokens",
                  "if (pm.response.code === 200) {",
                  "    const responseJson = pm.response.json();",
                  "    const data = responseJson.data;",
                  "    ",
                  "    if (data.access_token && data.refresh_token) {",
                  "        pm.environment.set('access_token', data.access_token);",
                  "        pm.environment.set('refresh_token', data.refresh_token);",
                  "        pm.environment.set('user_id', data.user.id);",
                  "        pm.environment.set('session_id', data.session_id);",
                  "        console.log('‚úÖ Authentication successful');",
                  "        console.log('üîë Access token saved to environment');",
                  "        console.log('üë§ User ID:', data.user.id);",
                  "        console.log('üì± Session ID:', data.session_id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"login_token\": \"{{login_token}}\",\n  \"otp_code\": \"{{banking_otp_code}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/login/verify",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "login",
                "verify"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "üè¶ Bank Account Management",
      "item": [
        {
          "name": "Get Bank Accounts",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test response status",
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Test response structure",
                  "pm.test('Response has correct structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('code');",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.have.property('accounts');",
                  "    pm.expect(responseJson.data).to.have.property('total');",
                  "});",
                  "",
                  "// Save first account ID for other tests",
                  "if (pm.response.code === 200) {",
                  "    const responseJson = pm.response.json();",
                  "    const accounts = responseJson.data.accounts;",
                  "    ",
                  "    if (accounts && accounts.length > 0) {",
                  "        pm.environment.set('bank_account_id', accounts[0].id);",
                  "        console.log('‚úÖ Bank accounts retrieved successfully');",
                  "        console.log('üè¶ Total accounts:', responseJson.data.total);",
                  "        console.log('üí≥ First account ID saved:', accounts[0].id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/bank-accounts",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "bank-accounts"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Bank Account",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test response status",
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "// Test response structure",
                  "pm.test('Response has correct structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('code');",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.have.property('account');",
                  "});",
                  "",
                  "// Save created account ID",
                  "if (pm.response.code === 201) {",
                  "    const responseJson = pm.response.json();",
                  "    const account = responseJson.data.account;",
                  "    ",
                  "    if (account && account.id) {",
                  "        pm.environment.set('created_bank_account_id', account.id);",
                  "        console.log('‚úÖ Bank account created successfully');",
                  "        console.log('üí≥ New account ID:', account.id);",
                  "        console.log('üè¶ Account number:', account.account_number);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"account_number\": \"{{secondary_account_number}}\",\n  \"account_name\": \"Secondary Account\",\n  \"bank_name\": \"Test Bank\",\n  \"bank_code\": \"TB001\",\n  \"account_type\": \"checking\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/bank-accounts",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "bank-accounts"
              ]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "collection_version",
      "value": "2.1.0",
      "type": "string"
    },
    {
      "key": "total_endpoints",
      "value": "41",
      "type": "string"
    }
  ]
}
